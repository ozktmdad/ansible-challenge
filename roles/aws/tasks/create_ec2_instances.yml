---
# Pick a random subnet
- name: Magic 8 ball of subnets
  set_fact:
    subnet: "{{ item }}"
  with_random_choice:
    - a
    - b
    - c

- name: "set fact public-{{ subnet }}"
  set_fact:
    public_subnet_id: "{{ item.value }}"
  when: (item.key == "public-{{ subnet }}")
  with_items: "{{ vpc_subnet_ids }}"

# Create ssh key pair
- name: create a new ec2 key pair, returns generated private key
  ec2_key:
    name: "{{ keypair_name }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: keypair
  notify: Copy EC2 Key Pair private key locally

# Create a check if instance exists
- name: Get all EC2 Instances
  ec2_instance_info:
    filters:
      "tag:html": one_page_challenge
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: ec2_facts

- name: Initialize an empty list for server exists
  set_fact:
    server_exist: []

# - name: Auto set fact value to false exists
#   set_fact:
#     not_exist: 
#       "{{ item.key }}": true
#   with_dict: "{{ one_page_challenge }}"

- name: Set server to list if it exists
  set_fact:
    server_exist: "{{ server_exist + [ item.tags.Name ] }}"
  when: one_page_challenge[item.tags.Name] is defined
  with_items: "{{ ec2_facts.instances }}"

# - name: Set fact if name exists
#   set_fact:
#     not_exist:
#       {"{{ item.tags.Name }}": false }
#   when: one_page_challenge[item.tags.Name] is defined
#   with_items: "{{ ec2_facts.instances }}"

- debug:
    msg: "{{ server_exist }}"

- name: Create EC2 Instances
  ec2:
    image: "{{ ec2_image }}"
    wait: yes
    instance_type: "{{ instance_type }}"
    region: "{{ aws_region }}"
    group: "{{ project_name }}-WebDMZ"
    vpc_subnet_id: "{{ public_subnet_id }}"
    assign_public_ip: yes
    key_name: "{{ keypair.key.name }}"
    count_tag: "{{ ec2_tag }}"
    exact_count: "{{ instance_count }}"
    instance_tags:
       Name: "{{ item.key }}"
       html: one_page_challenge
    user_data: "{{ lookup('template', '../templates/cloud_config.yml.j2') }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  when: item.key not in server_exist
  with_dict: "{{ one_page_challenge }}"
  notify:
    - Pause

- name: Refresh inventory
  meta: refresh_inventory