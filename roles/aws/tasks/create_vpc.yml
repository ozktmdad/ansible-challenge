---
# creates a VPC, configures a list of defined subnets, configures a list of defined security groups

# use the Ansible module to create our VPC, saving the output into `create_vpc`
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: vpc_facts

# parse the output of creating the VPC to extract the VPC ID -- we need to specify this in the subsequent tasks
- name: "set fact: VPC ID"
  set_fact:
    vpc_id: "{{ vpc_facts.vpc.id }}"

# iterate over our dictionary of subnets with `with_dict`, and create each one with the Ansible module
- name: create VPC subnets
  ec2_vpc_subnet:
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    tags:
      Name: "{{ item.key }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  with_dict: "{{ vpc_subnets }}"
  register: create_vpc_subnets

# this is a tricky one, using some filters to:
# - loop over the list of outputs from creating our subnets
# - for that subnet, define a "name: id" entry in the `vpc_subnet_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "create fact list: VPC subnet IDs"
  set_fact:
    vpc_subnet_ids_item: "{{ ({ 'key': item.subnet.tags.Name, 'value': item.subnet.id }) }}"
  with_items: "{{ create_vpc_subnets.results }}"
  register: vpc_subnet_ids_item_result

- name: "set fact list: VPC subnet IDs"
  set_fact:
    vpc_subnet_ids: "{{ vpc_subnet_ids_item_result.results | map(attribute='ansible_facts.vpc_subnet_ids_item') | list }}"

# iterate over our list of security groups and create each one with the Ansible module
- name: create VPC security groups
  ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    vpc_id: "{{ vpc_id }}"
    rules: "{{ item.rules }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  loop: "{{ vpc_security_groups }}"
  when: vpc_subnets is defined
  register: security_groups
